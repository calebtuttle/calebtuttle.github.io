{"version":3,"sources":["getWeb3.js","JobPost.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","JobPost","state","applicantAddrs","applyToJob","event","preventDefault","props","jobId","contract","accounts","linkedIn","target","value","methods","parseInt","send","from","alert","error","openForm","document","getElementById","style","display","closeForm","viewApplicantapplicantAddrs","viewApplicantAddresses","call","setState","applicantAddrItems","this","map","applicantAddr","index","key","className","title","description","poster","onClick","id","onSubmit","type","name","required","Component","App","jobPostings","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","JobBoardContract","networks","instance","Contract","abi","address","jobCount","getJob","job","push","postJob","elements","jobTitle","desc","jobDescription","posting","postings","runExample","response","jobPosts","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cda11dd.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n\nimport \"./JobPost.css\";\n\nexport default class JobPost extends Component {\n    state = { applicantAddrs: [] };\n\n    applyToJob = async (event) => {\n        event.preventDefault();\n        try {\n            console.log(\"applying to job with jobId \" + this.props.jobId);\n            const contract = this.props.contract;\n            const accounts = this.props.accounts;\n            let linkedIn = event.target.linkedIn.value;\n            await contract.methods.applyToJob(parseInt(this.props.jobId), linkedIn).send({ from: accounts[0] });\n        } catch (error) {\n            alert(\"Error\");\n            console.error(error);\n        }\n    }\n    \n    openForm = () => {\n        document.getElementById(\"applicationForm\" + this.props.jobId).style.display = \"block\";\n    }\n    \n    closeForm = () => {\n        document.getElementById(\"applicationForm\" + this.props.jobId).style.display = \"none\";\n        document.getElementById(\"applicationFormLinkedIn\" + this.props.jobId).value = \"\";\n    }\n\n    // removeJob = async (event) => {\n    //     event.preventDefault();\n    //     if (window.confirm(\"Are you sure you want to remove this job posting?\"))\n    //     {\n    //         try {\n    //             console.log(\"removing job with jobId \" + this.props.jobId);\n    //             const contract = this.props.contract;\n    //             const accounts = this.props.accounts;\n    //             await contract.methods.removeJob(parseInt(this.props.jobId)).send({ from: accounts[0] });\n    //         } catch (error) {\n    //             alert(\"Error\");\n    //             console.error(error);\n    //         }\n    //     }\n    // }\n\n    viewApplicantapplicantAddrs = async () => {\n        // event.preventDefault();\n        try {\n            console.log(\"Viewing applicants to job with jobId \" + this.props.jobId);\n            const contract = this.props.contract;\n            const accounts = this.props.accounts;\n            let applicantAddrs = await contract.methods.viewApplicantAddresses(parseInt(this.props.jobId)).call({ from: accounts[0] });\n            \n            console.log(applicantAddrs);\n            \n            this.setState({ applicantAddrs })\n        } catch (error) {\n            alert(\"Error\");\n            console.error(error);\n        }\n    }\n\n    render() {\n\n        let applicantAddrItems = this.state.applicantAddrs.map((applicantAddr, index) => \n            <li key={index} className=\"applicantAddrItem\">{applicantAddr}</li>\n        );\n\n        return (\n            <div>\n                <h4>{this.props.title}</h4>\n                <p>{this.props.description}</p>\n                <p>Posted by: {this.props.poster}</p>\n\n                <button onClick={this.openForm} className=\"open-button\" >Apply</button>\n\n                <div className=\"form-popup\" id={\"applicationForm\" + this.props.jobId}>\n                    <form onSubmit={this.applyToJob} className=\"form-container\" >\n                        <label>\n                            LinkedIn: <input type=\"text\" id={\"applicationFormLinkedIn\" + this.props.jobId} name=\"linkedIn\" required />\n                        </label>\n                        <br/>\n                        <input type=\"submit\" value=\"Send application\" />\n                        <button type=\"button\" className=\"btn cancel\" onClick={this.closeForm}>Close</button>\n                    </form>\n                </div>\n\n                {/* <button onClick={this.removeJob} className=\"remove-job-button\" >Remove Job</button> */}\n                <button onClick={this.viewApplicantapplicantAddrs} className=\"view-applicantAddrs-button\" >View Applicants' Addresses</button>\n                {applicantAddrItems}\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport JobBoardContract from \"./contracts/JobBoard.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport JobPost from \"./JobPost\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { jobPostings: [], web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = JobBoardContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        JobBoardContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const jobCount = await instance.methods.jobCount().call();\n      let jobPostings = []\n      for (var jobId = 1; jobId < jobCount; jobId++) {\n        let job = await instance.methods.getJob(jobId).call();\n        job = [jobId, job.poster, job.title, job.description];\n        jobPostings.push(job);\n      }\n\n      this.setState({ jobPostings, web3, accounts, contract: instance });\n    } catch (error) {\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n  };\n\n  postJob = async (event) => {\n    event.preventDefault();\n    const { jobPostings, accounts, contract } = this.state;\n\n    let title = event.target.elements.jobTitle.value;\n    let desc = event.target.elements.jobDescription.value;\n    let jobId = await contract.methods.jobCount().call();\n    await contract.methods.postJob(title, desc).send({ from: accounts[0] });\n\n    let posting = [jobId, accounts[0], title, desc];\n    let postings = jobPostings;\n    postings.push(posting);\n\n    this.setState({ jobPostings: postings });\n\n    console.log(\"Posted new job with jobId \" + posting[0])\n  }\n\n  runExample = async () => {\n    const { jobPostings, accounts, contract } = this.state;\n\n    var title = \"Solidity Developer\";\n    var desc = \"Write solidity, write tests, etc....\";\n    await contract.methods.postJob(title, desc).send({ from: accounts[0] });\n    let response = await contract.methods.getJob(1).call();\n    let posting = [response['poster'], response['title'], response['description']];\n    let postings = jobPostings;\n    postings.push(posting);\n\n    this.setState({ jobPostings: postings });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let jobPosts = this.state.jobPostings.map((posting) => \n        <JobPost key={posting[0]} web3={this.state.web3} accounts={this.state.accounts} contract={this.state.contract} \n            jobId={posting[0]} poster={posting[1]} title={posting[2]} description={posting[3]} />\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>A Decentralized Job Board</h1>\n        <hr/>\n        <form onSubmit={this.postJob}>\n            <label>\n                Job title: <input type=\"text\" name=\"jobTitle\" required />\n            </label>\n            <br/>\n            <label>\n                Job description: <input type=\"text\" name=\"jobDescription\" required />\n            </label>\n            <br/>\n            <input type=\"submit\" value=\"Post job\" />\n        </form>\n        <br/>\n        {jobPosts}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}